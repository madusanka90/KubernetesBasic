#Change image of a deployment
    $ kubectl set image deployment/<deployment-name> <container-name>=<new-image-version>

#Check rollout status of a deployment
    $ kubectl rollout status deploy/<deployment-name>

#Check deployment rollout history
    $ kubectl rollout history deploy/<deployment-name> --revision=<desired-revision-number>

#Rollback the deployment to desired version
    $ kubectl rollout undo deploy/<deployment-name> --to-revision=<desired-version-number>

#Create configmap from command line
    $ kubectl create configMap  --from-literal=MYSQL_ROOT_PASSWORD=password

#Scale replicas in commandline
    $ kubectl scale deploy/<deployment-name> --replicas=<# of replicas>

#Autoscale replicas in commandline
    $ kubectl autoscale deploy/<deployment-name> --min=<# of minimum replicas>  --max=<# of maximum replicas>

#Give a label to pod
    $kubectl label pod <pod-name> <key>:<value> --overwrite

#Select pods from lables
    $kubectl get pod -l <key>:<value>

#Describe pod from a label
    $kubectl describe pod -l <key>:<value>

#Remove taint from a master
    $kubectl taint nodes <node-name> node-role.kubernetes.io/master-

#Set taint on a node
    $kubectl taint nodes <node-name> node-role.kubernetes.io=master: NoSchedule

#K8S log directory
    $ /var/log/containers

#Upgrade kubernetes
    1) upgrade controle plane (update master with apt)
        $ sudo apt upgrade kubeadm
    2) verify kubeadm update
        $ kubeadm version
    3) upgrade plan
        $ sudo kubeadm upgrade plan
    4) upgrade all the component
        $ sudo kubeadm upgrade apply <version>

#Upgrade kubelet on each node
    * before upgrade kubelet on each node we need to make sure that non of the pods are running on that perticuler node which we are going to upgrade kubelet
        1) unschedule or remove any pod running in the node which are going to upgrade kubelet
            $ kubectl drain <node-name> --ignore-daemonsets     (only run daemonsets like cni)

        2)upgrade kubelet
            $ sudo apt update kubelet

        3)verify whether successfully running kubelet
            $ systemctl status kubelet
        
        4) enable scheduling on the node which we have upgraded the kubelet
            $ kubectl uncordon <node-name>

#Retreive the token which was used in "kubeadm init"
    $ sudo kubeadm token list

#Create a new token
    $ sudo kubeadm token generate

#Generate join command
    $ sudo kubeadm token create <new-token> --ttl <number-of-hours> --print-join-command

#Upgrade Os on a node
    1) unschedule or remove any pod running in the node which are going to upgrade kubelet
        $ kubectl drain <node-name> --ignore-daemonsets     (only run daemonsets like cni)
    
    2) remove node from the cluster
        $ kubectl delete node <node-name>
    
